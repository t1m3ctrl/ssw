/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.sibsutis.comments.api;

import org.sibsutis.comments.model.Comment;
import org.sibsutis.comments.model.CommentInput;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import jakarta.validation.Valid;

import java.util.List;

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-03-26T09:33:16.652656262Z[GMT]")
@Validated
public interface CommentsApi {

    @Operation(summary = "Create a new comment", description = "Add a new comment to a specific resource.", tags={ "comments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Comment created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))) })
    @RequestMapping(value = "/comments",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Comment> createComment(@Parameter(in = ParameterIn.DEFAULT, description = "Comment data", required=true, schema=@Schema()) @Valid @RequestBody CommentInput body
);


    @Operation(summary = "Delete a comment", description = "Remove a comment by its ID.", tags={ "comments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Comment deleted successfully"),
        
        @ApiResponse(responseCode = "404", description = "Comment not found") })
    @RequestMapping(value = "/comments/{commentId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteComment(@Parameter(in = ParameterIn.PATH, description = "ID of the comment", required=true, schema=@Schema()) @PathVariable("commentId") Integer commentId
);


    @Operation(summary = "Get a comment by ID", description = "Retrieve details of a specific comment.", tags={ "comments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Comment found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))),
        
        @ApiResponse(responseCode = "404", description = "Comment not found") })
    @RequestMapping(value = "/comments/{commentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Comment> getCommentById(@Parameter(in = ParameterIn.PATH, description = "ID of the comment", required=true, schema=@Schema()) @PathVariable("commentId") Integer commentId
);


    @Operation(summary = "Get all comments for a resource", description = "Retrieve all comments for a specific resource.", tags={ "comments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully retrieved comments for the resource", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Comment.class)))) })
    @RequestMapping(value = "/comments/resource/{resourceId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Comment>> getCommentsByResource(@Parameter(in = ParameterIn.PATH, description = "ID of the resource", required=true, schema=@Schema()) @PathVariable("resourceId") Integer resourceId
);


    @Operation(summary = "Get all comments by user", description = "Retrieve all comments made by a specific user.", tags={ "comments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully retrieved comments by user", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Comment.class)))) })
    @RequestMapping(value = "/comments/user/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Comment>> getCommentsByUser(@Parameter(in = ParameterIn.PATH, description = "ID of the user", required=true, schema=@Schema()) @PathVariable("userId") Integer userId
);

}

